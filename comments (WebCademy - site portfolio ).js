/*  =========================    Урок 1 + 2   ==========================

    Подключаем стили     <link rel="stylesheet" href="./main.css"> по ссылке в head. ***Начинать путь нужно с  ./ - означает текущую
    директорию(один уровень с index.html) так гарантируется работа с любой длинной вложенности на сервере.

    коментарии в css также как многострочные комментарии в JS  - /звездочка комментарий звездочка/

    В css файле по нажатию контрол+пробел показывается палитра цветов.

    Обращаться можно по 
    1)тегу 
    body {
        background-color: rgba(116, 100, 131, 0.486);
    }
    h1 {
        color: darkmagenta;
    }

    по 2)классу. Название класса не может начинатся с цифры
    .red {
        color: red;
        text-decoration: overline;
    }

    по 3) id, по 4) аттрибуту

    color -  цвет элемента
    text-decoration: underline; - подчеркивание текста
    background-color: rgba  - цвет бекграунда 

    margin - внешние отступы
    body {
        margin: 0; - сделали что бы  блок div прилягал полностью к краям браузера(не было зазоров между ними) 


    width - ширина блока, 100% - полная ширина потому что лежит в блоке body
    Если поставить   height 100% то он будет занимать высоту от контента в нем, а для того что бы на весь body его растянуть нужно установить 100vh - view height - это высота всего окна которое есть в середине браузера
    .header { 
        width: 100%;
        height: 100vh;
        background-color: darksalmon;

    Для того что бы удобно было выравнивать текст в блоке нужно объявить блок flex боксом. Это делает в css в блоке который будет флексом (обртывать вложенные)  display: flex;  По умолчанию в флекс бокс модели все элементы выстраиваются в ряд(строку). Прописываем     flex-direction: column; для постановки элементов в столбец( по умолчанию было row).*** Обычно все флекс
    параметры прописывают вначале блока.

    выравнивание происходит по осям     justify-content: center; - вертикальная относительно колонки 
    align-items: center; - горизонтальная относительно колонки

    По Figma смотрим макет верстки. Текст используется 1 Монсерат с разным начертанием, нужно его подключить через сервис google font shttps://fonts.google.com. Находим там этот шрифт, заходим в него и выбираем какие начертания нужно подключить. В данном случае regular, bold, semibold и копируем ссылку которая появилась в окне справа в index.html после ссылки на css вставляем. Что бы к нему обращаться в ксс файле с сайта копируем CSS rules to specify families - font-family: 'Montserrat', sans-serif; и вставляем эту инструкцию в свойства body. Эта инструкция говорит что все надписи внутри тега боди и вложенные в него будут наследовать этот шрифт, а через запятую указан санс-сериф - прямой шрифт без засечек. Если наш шрифт не подгрузится у пользователя, то будет использован другой шрифт сенс-сериф который доступен пользователю по умолчанию.

    Из фигмы выделив нужный элемент можно выбрать справа со вкладки code ксс параметры и вставить их в нужный блок ксс файла.
            position: absolute;
            width: 581px;
            height: 73px;
            left: 430px;
            top: 327px;

            font-family: Montserrat;
            font-style: normal;
            font-weight: bold;
            font-size: 56px;
            line-height: 130%;
            //identical to box height, or 73px 

            text-align: center;

            color: #FFFFFF;
    Но не все эти параметры нам нужны, поэтому нужно некоторые удалить. Блок с позицией пока удаляем, так как у нас позиционирование уже есть. Удаляем фонт фемили
    потому что у нас уже в боди он прописан для всех элементов. Удаляем фонт-стайл - это начертание прямого текста. По умолчанию и так ставится прямое начертание (курсив-italic).
    Фонт вейт - переводим в числовое значение. Когда выбирали начертание шрифта на гугл сайте регуляр = 400, семиболд = 600, болд = 700.
    Line-height - высота строки. 130% аналогично множителю 1.3
    text-align: center - выравнивание текста по центру.

    Также копируем и удалям ненужное для хедэр-сабтайтл
        font-weight: bold;
        font-size: 16px;
        line-height: 150%;
        
        text-align: center;
        letter-spacing: 0.2em;   - расстояние между буквами(разреженность текста)
        text-transform: uppercase; - текст в верхнем регистре
        
        color: #FFFFFF;

    Теперь изменим отступы между элементами тайтл и сабтайтл, для этого нам нужно изменить цвет бекграунда.
    Изменим цвет бекграунда на похожий с макета. Для этого выберем белый текст, клацнем на цвет, там выберем пипетку и получим цвет фона клацнув ей на цвет на макете, потом
    вернем тексту белый цвет, а полученный вставим в ксс файл. Откроем панель разработчика на вкладке элементс. При наведении на элемент, он выделяется и оранжевым цветом
    показываются отступы, которые даны по умолчанию, нам нужно поставить свои отступы. Это внешние отступы поэтому для хедер-тайтл и хедер-сабтайтл прописываем margin: 0; обнуляя
    отступы со всех сторон.
    В фигме выбираем первый элемент и зажав альт наводим на нижний элемент - выскакивает подсказка - 25 это расстояние между ними. Теперь после margin можно дописать в хедер-тайтле
    отступ вниз 25px. margin-bottom: 25px;

    Теперь экспортируем фон. Выбираем в фигме фон, и в правой панеле выбираем экспорт. Файл у нас большой и в нем не нужна прозрачность, поэтому будем экспортировать в JPG. Если
    нужна прозрачность(обычно для небольших иконок) экспортируем в PNG. В папке с проектом создаем папку img а в ней папку header и помещаем туда изображение. 
    После background-color что бы цвет его не перекрывал прописываем background-image: url("./../img/header/header-bg-default.jpg"); - путь считается относительно ксс файла. ./ - текущая директория,
    потом ../ - две точки выход на уровень вверх. 

    Применилось изображение оно дублируется, а не растянулось на весь блок. Нам нужно прописать background-size: cover; background-size: - размер фон. изображ.
    cover - полностью заполнит блок в котором размещено, так что бы сохранить масштабирование и не допустить пустых областей.
    Можно сделать что б наверняка не было видно пустых областей дописав ниже background-repeat: no-repeat; - отменяем дублирование, background-position: center; - позиция в центре.

    Теперь экспортируем стрелочку, это векторная фигура, поэтому экспортируем ее как svg формат. СВГ мы можем подключить как картинку, а можем через код. Сейчас подключим как
    картинку, для этого делаем новый блок <div class="header-arrow"></div>. В макете фигмы видим размер общей области 48 на 48. Прописываем эти размеры width: 48px;
    height: 48px; также прописываем  background-color: red; для видимости этого блока. теперь нам нужно его разместить внизу блока по центру абсолютным позиционированием.

    Изначально элементы размещаются статически или по модели флексбокса. Но если нужно выдернуть элемент из общей структуры нужно использовать абсолютное позиционирование.
    Прописываем position: absolute; - теперь эл. перекрыл элементы с текстом. Теперь он размещается относительно родителя которым является боди. Но мы можем принудительно
    установить ему родителя, для этого какому-то диву в котором находится этот элемент нужно прописать position relative, тогда уже этот див будет его родителем для 
    абсолютного позиционирования. Прописываем для хэдера. Теперь допустим для размещения в правом верхнем углу элемента хедер элемента арров в его блоке прописываем
    top - 0, right- 0.
    Для расположения внизу по центру прописываем   bottom: 0px;   left: 50%; Но блок будет не совсем по центру, потому что считается расстояние от левой границы экрана до
    левой границы элемента. Можно использовать трюк пододвинув элемент влево на половину его ширины - 24 пикселя. Что бы пододвинуть влево используем отступ слева
    с отрицательным значением  margin-left: -24px; но размещение будет завязано на ширине элемента, и если ширина изменится то нужно будет менять и параметр.
    Так что прописываем вместо него transform: translate(-50%, 0); - он принимает 2 значения: 1) смещение по х, 2) смещение по у. По у нам не нужно смещать поэтому пишем 0.

    Теперь поместив в элемент стрелочку. Это можно сделать прописав ее через фон(бекграунд), через тег img в индексе, можем передать напрямую код свг иконки.
    Размещаем в индексе через тег img  <img src="./img/header/chevron-down.svg" alt="Arrow"> - путь к картинке, альт - описание картинки. Теперь убираем красный фон.
    Отступ от низа блока хедер до блока со стрелкой 30 пикселей, прописываем в bottom: 30px; 
    */



/*  =========================    Урок 3 верстаем блок "Портфолио"    ==========================

    Создадим новый див для блока портфолио. В него поместим див для заголовка и отдельно див обертку для карточек в котором они будут позиционироваться по центру.
    Див Обертка нужен что бы при разных разрешениях экрана его содержимое оставалось по центру экрана и было хорошо читаемо.

    В фигме при нажатии ctr+shift+4 показывается сетка которая помогает в построении макета. Если выделить в фигме сразу две карточки через шифт, то покажется общая ширина
    контейнера который создадим в <div class="portfolio">. Создаем <div class="container"> его не подвязываем к портфолио в ксс, потому что стиль для него будет использоватся также
    в футере(подвале), тоесть этот див будет у нас использовани и для подвала. Из-за этого в ксс мы будем его прописывать после стиля боди, потому что он общий для нескольких
    элементов в разных частях верстки. 

    Устанавливаем ширину для контейнера в 1110px как по макету width: 1110px;. Но для того что бы адаптировать его к мобильной верстке нужно задавать максимальную ширину, тогда
    если размер экрана будет меньше то контейнер сожмется max-width: 1110px, а если размер экрана будет больше, то контейнер остановится на заданном значении.
    Для дива портфолио и контейнер задаем background-color что бы их можно было различить в нашей верстке.

    Для удобства работы с блоком нужно скрыть шапку из прошлого урока. Для этого создадим в ксс файле стиль none .none{display: none;} и пропишем его в индексе к диву с классом
    хедер, этот стиль скрывает полностью элемент. Но хедер все равно показывается, это получилось потому что к диву применен и хедер в котором прописан display flex и none,
    но none у нас в ксс файле прописан выше чем хедер и браузер переопределил свойство дисплей на флекс. Для того что бы этого избежать нужно или прописать none в самый конец
    ксс файла или добавить в none восклицательный знак important - display: none !important; - так браузер будет видеть что это свойство важное и не будет его переопределять.

    Далее нужно блок контейнер выровнять по центру, для этого прописываем  margin-left: auto;  margin-right: auto; эти свойства выравнивают блочный тег по центру.

    По макету фигмы видно что верхний отступ от надписи Портфолио до шапки - 80 пикс, а от нижнего края до подвала 115, зададим их в блоке портфолион как внутренние отступы,
    так как внешне блок портфолио будет прилягать вплотную к шапке и подвалу. padding-top: 80px; padding-bottom: 115px;

    Теперь стилизуем надпись Портфолио, она помещена в h2 тег и добавим для ситилзации класс portfolio-header. В него в ксс файле копируем свойства из фигмы 
    без абсолютного позиционирования.

    Далее нужно заверстать блок с карточками. Для начала сделаем одну карточку потом на ее основе сделать другие карточки и поместим их в отдельный див обертку который будет их выравнивать
    в ряд с переносом. Выглядеть будет карточка как див с классом card в котором размещена картинка, ниже заголовок h3, ниже текст с описанием. Для копирования картинки как на
    макете выбираем карточку и потом картинку Group 5 потом справа экспорт в JPG. В данном случае картинка намного больше чем мы экспортируем, и если нужно получить оригинал нужно 
    раскрыть Group 5, потом справа зайти в inspect  в ней во вкладке code выбрать table и там будет ссылка на оригинал картинки. Экспортируем все 4 картинки.
    Прикручиваем картинку через тег img, заголовок в h3 и текст в теге <p>. Добавляем классы для картинки card-img, для заголовка card-title, а тег р стилизуем по классу родителя
    с классом card.

    Стилизуем заголовок card-title, копируем свойства из фигмы. Так как это заголовок у него есть отступы, мы их сбрасываем m0 развернем табом в margin: 0; и до следующего
    элемента - текста у нас есть отступ вниз 13px пропишем его mb13 развернется в margin-bottom: 13px;

    Стилизуем карточку. У нее есть внешняя тень, белый фон и внутренние отступы до элементов по 20 пикселей со всех сторон и 30 от нижнего края.
    Размещаем классы в ксс файле в той же последовательности что и в индексе для удобства чтения.
    Делаем белый фон background-color: white;. Так как карточка блок - она заняла 100% ширины - особенности блочной модели. Ширина карточки по фигме - 540, прописываем
    максимальную с оглядкой на адаптивность max-width: 540px;
    Делаем внутренние отступы по 20пикселей, вниз 30 - это потому что так текст расположен(с учитом высоты текста???) p20 раскрываем в padding: 20px; получился отступ
    везде ппо 20 пикселей а справа больше, это произошло потому что в блочной модели при указании ширины подразумевается ширина контента блока и она не включает в себя
    внутренние отступы(паддинги) и не включает рамку, например border: 10px solid blue, то блок увеличится в ширину еще на 20 пикселей(левая 10 + правая 10). Для того 
    что бы ширина была не контента, а блока в которые все включается, нужно прописать box-sizing: border-box;
    *** Что бы не прописывать для каждого элемента box-sizing: border-box; используют трюк. В самом верху ксс файла прописывают *{} - эта запись выбирает все элементы 
    на странице и в него помещают эту запись.

    Теперь задаем отступ от картинки до заголовка,  и стилизуем абзац если это нужно.
    margin-bottom: 20px;  - от картинки до заголовка.

    Стилизуем абзац относительно дива с классом card обращаемся .card p {} - это означает что мы выбираем все теги р которые лежат в классе card. Нужно указать
        font-size: 16px; line-height: 130%; color: #000000; остальные значения в фигме стандартные для шрифта по умолчанию. Также удаляем у него стандартные внешние
        отступы     margin: 0; и допишем отступ вниз 10 пикселей что бы соответствовать макету в фигме    margin-bottom: 10px;
    Это карточка превью, поэтому она не рассчитана на несколько абзацев. 


    Выстроим карточки в определенном порядке. Прокоментируем начало и конец верстки карточки в индексе. Скопируем карточку 3 раза выделив код и нажав shift+alt+вниз, видим
    что все карточки смещаются вниз в один столбец потому что это блочный тег див и он занимает всю ширину, а нам нужно что бы было в 2 столбца визуально. На самом деле
    карточки будут идти в линию, а потом переносится на следующую строку. Для этого выравнивать будем по модели flexbox. Для всех карточек нарисуем отдельный div контейнер обертку .portfolio-card-wrapper,
    который будет включать в себя ширину двух карточек с отступами между ними. Для него пропишем display flex (в этой модели по умолчанию элементы выстраиваются в ряд),
    а для переноса на следующую строку пропишем свойство flexwrap - wrap, тогда те элементы которые не помещаются в првый ряд переносились и помещались во второй.

    Создаем див обвертку(контейнер) <div class="portfolio-card-wrapper"> и помещаем в него все карточки. Прописываем display: flex; - карточки выстроились в ряд без переноса.
    flex-wrap: wrap; - заставляет карточки переносится. Тепеперь выровняем отступы карточек между собой. Можно задать его с помощью margin-right но он будет срабатывать только
    для первой карточки в ряду, так две карточки останутся без него, легче сделать это через флексбокс модель, свойством которое выравнивает элементы по краям контейнера
    (выравнивает элементы по оси х - потому что ряд основной, делает отступы от первого и последнего элемента в ряду до контейнера, а свободное пространсво распределяет между
    элементами) justify-content: space-between;

    Теперь добавим отступы от карточки вниз, до следующей карточки согласно верстке 30пикселей, пропишем в card  margin-bottom: 30px;

    У нижних карточек теперь появился отступ который увеличивает общее расстояние к низу  страницы, добавляя этот марджин к паддингу блока портфолио. Нужно убрать у двух
    нижних карточек марджин используя псевдо селекторы. Можно было бы создать дополнительный класс и прописать в нем margin bottom-0, а потом добавить этот класс к двум
    карточкам, но мы сделаем по псевдо селектору - выбрав два последних элемента внтури контейнера. В данном случае контейнером выступает portfolio-card-wrapper внутри него
    лежат дивы с классом card. Для этого используем псевдо селектор - он так называется потому что с в хтмл мы ничего не добавляем но тем не менее этот селектор будет работать
    и выбираем два последних элемента.
    .card:last-child - выберет последнюю карточку,а  .card:nth-last-child(2) - выберет второй с конца элемент. В этих блоках в ксс файле мы и прописываем margin-bottom: 0;
    Что бы сократить запись и не дублировать свойство, напишем обращения к элементам через запятую

    Добавим тень и убираем цветной фон кард. Убираем бекграунд колор у контейнера и у портфолио, и добавим тень карточкам. В фигме выбираем карточку и слева выбираем rectangle 10
    это наша карточка, теперь справа можно увидеть свойство бокс шедов, скопируем его box-shadow: 0px 10px 40px rgba(126, 155, 189, 0.35); в класс кард. Это свойство задает 
    тень для блока. Первая цифра указывает на ось х смещение в право, вторая - у смещение вниз, третья 40 пкс - размытие тени, дальше цвет тени и последняя - 0.35 прозрачность.

    Обнуляем отступы у h2 портфолиохедер и добавляем отступ до следующих элементов(карточек 70 пикс)     margin: 0;   margin-bottom: 70px;

    Копируем текст для названия карточек и сменим картинки в карточках. Убираем параметр нон у хедера.*/



/*  =========================    Урок 4 верстаем блок "Подвал"    ==========================

    Создадим див который будет разворачиваться на всю ширину и применим для него синий цвет, в нем создадим див контейнер он будет центрировать контент и ограничивать его по
    ширине. В нём будет див который будет выравнивать элементы в ряд и внутри него создадим три блока которые необходимы согласно макету 1) блок копирайт 2) соц.сети
    3) обратная связь.

    Создаем div class="footer" и присваиваем в ккс файле ему свойство цвета из фигмы background: #1E4776; - можно задавать цвет и так. Пока блок не виден потому что у него нету
    контента внутри. Нужно или задать паддинги или высоту или поместить контент. Добавим надпись пока что надпись Footer. А в свойствах добавим паддинги до контента
    соответсвенно макету 45 сверху, 165 с боков, 129 снизу.     padding-top: 45px;     padding-bottom: 130px; - округлили до 130

    Убираем надпись из дива футер и создаем в нем <div class="container"> свойства для него мы уже описывали, в нем контент выравнивается по центру и присутствует максимальная
    ширина.

    Создаем <div class="footer-row"> для выстраивания внутренних элементов в ряд по флексбокс модели. Стилизуем его display: flex;  flex-direction: row; -это можно не писать,
    по умолчяанию и так устанавливается ряд    justify-content: space-between; - выравнивание по основной оси (х) по спейс битвину. 


    Создаем блоки.
    1) <div class="footer-copyright"> . Контент в середине состоит из имени большими буквами(тайтл) <div class="footer-copyright-name"> и описания - обычного текста <p>.
    Видим что текст черным цветом на синем плохо виден, а по макету 2 из 3х элементов написаны белым цветом, значит можно по умолчанию щадать цвет текста элементов в
    футере белым color: white; Но в первом блоке и в тексте третьего блока цвет текста - светло синий, будем стилизовать непосредственно в них. Тоесть в 
    footer-copyright мы пропишем цвет из фигмы  color: #7E9EC9;
    Теперь стилизуем текст в  footer-copyright-name и теге р  - .footer-copyright p. Копируем свойства из фигмы, так как весь текст этого блока сделан одним блоком фигмы справа,
    то для копирования свойства конкретного текста нужно выбирать этот текст на макете. Так как высота одинаковая для обоих блоков     line-height: 130%; для того что бы не
    дублировать ее пропишем это свойство в общем для этих текстов блоке .footer-copyright. 
    Отступ между текстами можно посмотреть в первой вкладке фигмы справа Десайн - окно Текст - параметр Параграф спейсинг - 15.
    Тоесть для footer-copyright-name нужно прописать margin-bottom: 15px; - отступ вниз до следующего текста, а для параграфа р обнулим марджин и тоже пропишем отступ вниз
    на случай если позже будет добавляться еще текст margin: 0;   margin-bottom: 15px;

    Изменим .footer-copyright {line-height: 1.3; - высоту текста на множитель вместо процентов, потому что процентная высота берется от фонтсайза внутри .footer-copyright а его
    там нету и один раз вычислив это расстояние от какого то размера шрифта например 16, эту высоту будет применять и к высоте например в 28, из-за этого отступ
    margin-bottom: 15px; начинается от нижней линии букв не включая хвостики которые уходят вниз например  у - буквы. Тоесть нужно или поменять свойство на множитель 
    так высота будет вычисляться в зависимости от размера шрифта в блоке где указан этот размер или прописывать 130% внутри каждого блока что будет дублировать код.


    2) блок. В нем есть текст и второй строкой идут иконки, нужно их экспортировать, что бы формат был свг, потому что иконки векторные с прозрачностью.
    Текст помещаем в тег р, иконки будут ссылками и будут выравниваться в один ряд, поэтому для них создадим див для флексбокс модели <div class="footer-icons-row">
    в середину помещаем ссылку а в нее картинку. <a href="#"><img src="" alt=""></a> .  href - нужно всегда заполнять заглушкой #, пока нету настоящего пути, чтобы она
    стала рабочей и для нее появились визуальные свойства, которые мы сможем стилизовать в ксс.

    Стилизуем, копируя свойства для текста .footer-icons p. А в .footer-icons-row  дополнительно прописываем align-items: center; - для того что бы они были выровняны по
    вертикальной оси Y.  justify-content: space-between; - нам не подойдет. потому что в макете значки не доходят до конца блока и расположены на разном расстоянии друг от друга
    потому что размер самих значков разный. Возьмем усредненный отступ в 30 пикселей между ними и попробуем применить. Это можно сделать присвоив один класс для всех ссылок
    в индексе, а можно написать селектор который выберет все элементы которые находятся на первом уровне вложенности в footer-icons-row, тоесть это ссылки, а в ссылках это 
    второй уровень вложенности относительно footer-icons-row уже находятся картинки. Селектор выглядит так .footer-icons-row > *  - означает что будут выбраны все теги *, которые
    находятся на первом уровне вложенности >. К этим элементам прописываем margin-left: 30px; Также нужно у первой ссылки убрать отступ слева можно выбрать этот элемент через
    first child, а можно видоизменить селектор .footer-icons-row > * + * {  - это означает что на первом уровне вложенности будут выбраны все теги у которых есть сосед слева,
    у первого тега его нету, поэтому он не выбирается.


    3) блок - фидбека footer-contacts. Содержит кнопку с надписью - связаться в контакте и текст ниже <p>. Кнопку мы выполним как тег ссылки с видом кнопки и надписью по центру. *Что бы при нажатии на ссылку страница не улетала наверх(в начало) нужно
    указывать заглушку с восклицатльным знаком href="#!"
    <a href="#" class="footer-button"> Связаться Вконтакте </a>

    Стилизуем текст - переносим из фигмы параметры и прописываем margin: 15px 0; - отступ вверх до кнопки 15 пикселей а с других сторон по 0. Для кнопки отступ прописывать не будем

    Для стилизации кнопки нужно установить плашку кнопки, прописать внутренние отступы и высоту и стилизовать текст который находится в кнопке. По умолчанию ссылка это строчный
    элемент, у них плохо работают паддинги, бордеры и высота. Поэтому для работы с ним как с блоком нужно перевести его в формат блока или инлайнблока или флексбокса. Для кнопок
    обычно используюн инлайнблоки - потому что позволяет работать как с блоком но в тоже время его ширина будет основываться на внутреннем контенте.
    .footer-button { display: inline-block; - устанавливаем инлайнблок.
    Вид кнопки создается свойствами элемента ректангл в фигме   border: 3px solid #FFFFFF; - рамка шириной 3 пикселя солид - непрерывная цвет белый
    box-sizing:border-box; - включение всех паддингов в середину элемента, это у нас прописано в ксс файле для всех элементов поэтому не копируем
    border-radius: 50px; - радиус скругления по углам рамки. height: 50px; - высота рамки, можно задавать потому что обычно в кнопке одна строка и высота не будет менятся,
    а если в кнопке будет больше двух строк то уже и стилизовано будет по другому.  Пропишем пока     color: white; - что бы виден был текст.
    Зададим отступы что бы текст был по центру кнопки. По макету отступы по бокам 30пкс, свержу 14, вниз 15. Прописываем padding-left: 30px;  padding-right: 30px;
    Для размещения текста по центру по вертикали можно вопсользоваться паддингом топ и указать значение на глаз - 11 пкс для размещения по центру. А можно задать
    высоту текста такую же как высота кнопки line-height: 44px. - потому что 50пкс - 3+3 пкс - бордеров(ширины рамки). Копируем остальные свойства текста для кнопки
    из фигмы     font-weight: 700;   font-size: 16px;  text-transform: uppercase;       ***line-height 130% - удалим потому что уже задали 44 пкс для центровки.
    Уберем нижнее подчеркивание как для ссылок свойством text-decoration: none;

    Все элементы добавлены но на вид они не так размещены как на макете. Блок 2 сузился а блок 3 слишком широкий, это потому что мы не задавали ширину блоков. Смотрим ширину в
    макете. Включим сетку контр+шифт+4 и видим что каждый блок занимает по 4 колонки. Что бы определить сколько это в пикселях можно нарисовать прямоугольник. Получили 350пкс.
    Задаем max-width: 350px;  для  .footer-copyright { , .footer-icons { и .footer-contacts {. Проверяем в верстке размеры элементов и видим что у первых двух размеры отличаются
    от заданных, а у третьего совпадают, это произошло потому что  мы указали максимальную ширину, а в первых двух блоках контента не много и он не занимает все 350 пкс поэтому
    эти блоки меньше. Для исправления ситуации так как эти блоки находятся в диве флексбокса .footer-row можно прописать в этих блоках flex-grow: 1; - это означает что
    данные блоки должны забирать под себя всю допустимую ширину которая для них указанна, не обращая внимания на наполненность контентом. Так как у нас дублируется код
    max-width: 350px;    flex-grow: 1; во всех трех блоках, можно его вынести в новый класс .footer-column и присвоить его как дополнительный класс в верстке.

    У автора почему то макет не сошелся с финальной версткой в третьем блоке на макете 2 строки текста, у него получилось 3 строки. У меня и там и там 3 строки.
    */

    

/*  =========================    Урок 5 верстаем внутреннюю страницу    ==========================

    Согласно макету в фигме есть еще внутренняя страница в которую попадаешь при клике на многостраничный сайт с природой. в директории с индекс, создаем файл forest0travel.html
    Задаем бызовую разметку. Меняем <html lang="ru"> - потому что в основном у нас будет русский язык на сайте. Меняем тайтл на Форестр тревел и подключаем шрифты и ксс файл
    также как в индекс.

    Страница состоит из главной части и футера. Футер такой же как на основной странице. Главная часть состоит из тайтла, картинки, текста + ссылки на сайт и кнопки - вернуться
    на главную страницу, весь этот контент будет помещен в контейнер который будет центрировать его и ограничивать по ширине.
    Завестаем основную, а потом скопируем футер.

    Создаем див для главной секции что бы в ней прописывать отступы сверху и снизу, а в нее поместим контейнер с моделью флекс бокс. В него помещаем тайтл - заголовок h1. потому
    что он будет единстрвенным заголовком на этой странице "project-title". Для картинки делаем свой див project-image и в него помещаем img обращаем внимание на вид кавычек
    в подписи альт.

    Создаем див для текста project-description и в него помещаем два тега р - для текста и для ссылки <p>Адрес сайта: <a href="#">site.com</a></p>. Ссылку на вернутся на сайт
    в виде кнопки допишем позже.

    Запускаем страницу в лайв сервере, стилизуем ее.
    Стилизуем общее окно .project , прописываем расстояние до тайтла 80 и от нижнего края до кнопки 120  padding-top: 80px; padding-bottom: 120px;
    Можно указать паддинг одной строкой padding:80px - означает что 80 будет для всех сторон, если прописываем 2 значения padding:80px 120px; - 80 будет сверху снизу, 120 - стороны
    если padding:80px 120px 50px; -80- сверху, 120 - по бокам, 50 снизу. padding:80px 120px 50px 30px; - 1 - верх, 2 - справа, 3 снизу, 4 слева. тоесть можно написать
    padding: 80px 0 120px 0;

    Весь контент в этом блоке будет размещаться по центру, поэтому прописываему text-align: center;

    Стилизуем тайтл .project-title , копируем свойства из фигмы. Обнуляем внешние отступы и прописываем отступ вниз до картинки margin-bottom: 40px;

    делаем отступ вниз от картинки до текста.

    Текст в одну строку, а на макете в 2. Нужно ограничить блок для текста по ширине такой же как на макете  max-width: 730px; Делаем отступ до кнопки ссылки 60 пкс 
    margin-bottom: 60px;
    копируем свойства из фигмы для абзацев и установим отступы между ними     margin-top: 0; margin-bottom: 15px;
    Блоки текста сдвинуты влево, что бы из спозиционировать по центру нужно прописать марджены лефт райт - ауто, но у нас уже есть марджин боттом 60, поэтому избежим
    дублирования кода прописав марджин таким образом .project-description {   margin: 0 auto 60px;

    Добавляем кнопку ссылку. Будем реализовывать тегом а project-btn-back - ссылкой со стилизацией под блоком проджект дескрипшн. Принцип такой же как при создании кнопки ссылки
    с главной страницы, копируем ее свойства в новую кнопку и изменяем согласно макету(изменился цвет текста и рамки), размер кнопки увеличился на 10пкс. Из-за высоты поменяется
    и line-height: 54px; что бы текст оставался по центру.

    Размещаем футер. Копируем полностью с главной страницы.

    Сделаем ссылки рабочими. С главной страницы на эту будет переход по клику на многостраничный сайт, значит внутри этой карточки нужно разместить ссылку. Сделаем всю карточку
    ссылкой и заставим ее менять цвет и позицию при наведении на нее. Для этого весь контент внутри дива кард помещамем в ссылку и пропишем ссылку на вторую странцу, для ссылок
    если страница лежит в корневой папке пишут без слешей адресс.  
    <a href="forest-travel.html" class="card-link">
        <img class="card-img" src="./img/portfolio/multipage.jpg" alt="Многостраничный сайт">
        <h3 class="card-title">Многостраничный сайт</h3>
        <p>Верстка многостраничного сайта.</p>
    </a>

    При добавлении ссылки появились подчеркивания под текстом, нужно это убрать путем стилизации. Для этого присваиваем ссылке класс class="card-link"  и стилизуем ее в ксс
    файле.  блок card-link размещаем в ксс сразу после блока card, так как идет и в разметке.     text-decoration: none; - убираем подчеркивание текста.

    Стилизуем ссылку при наведении, прописываем селектор .card-link:hover {    color: #012210; - добавляем цвет текста при наведении но в верстке на сайте это не срабатывает.
    Выбираем в инспекторе элемент ссылки а и видим что он занимает небольшой по высоте блок между картинкой и тайтлом и как бы не содержит контента. Это происходит потому что
    ссылка это инлайн элемент(линия) и не оборачивает все элементы как мы хотели, значит нужно ей присвоить display: block; что бы она была блочным элементом. Теперь ссылка
    включает в себя контент, но цвет текста по прежнему не меняется. Теперь протестируем ховер, в панели разработчика(инспекторе) в вкладке styles напротив filter есть
    кнопка hov которая позволяет протестировать элементы с ховером. Видим что ховер работает, но цвет не перекрывается из-за того что в самих тегах с текстом мы прописывали
    цвет в них, и они идут в ксс файле после ховера и считаются главнее. Убираем эти цвета в .card-title { и .card p { так как главный цвет по умолчанию у нас прописан в боди.
    Теперь работает при наведении, но при обычном состоянии цвет текста становится фиолетовым, это дает ссылка потому что мы по ней уже проходили. Для отмены этого свойства
    устанавливаем цвет в .card-link { это и будет цвет по умолчанию для текста ссылки.

    Наша ссылка не включает в себя отступы, а лишь контент. И когда наводим курсор уже на карточку но еще не на ссылку, то ничего не происходит. Нам нужно убрать паддинги у 
    карточки и добавить их для ссылки, тогда ссылка будет включать в себя эти отступы и реагировать на наведение на них. Сделали, но теперь сломались остальные три карточки,
    значит добавим эту ссылку и для них тоже, для сохранения свойств и дальнейшего добавления ссылок для них.

    Делаем перемещение вверх при наведении, реализуем смещением карточки для этого пишем селектор .card:hover {  transform: translateY(-15px); - трансформ перемещает элемент
    транслейт по оси У вверх на 15 пкс. Все работает, но для плавности перемещения нужно дописать в .card {  transition - отвечает за плавные переходы. 
    transition: transform 0.2s ease-in; - сначала прописываем для какого свойства будет применено transform, 0.2s - за сколько будет осуществлен перемещение, ease-in - временная
    функция (линейно - linear, ease, ease-in, ease-out) также пропишем что бы цвет проявлялся плавно в .card-link { transition: color 0.2s ease-in;

    Реализуем  ссылку на второй странице. Начнем с батн-бэк пропишем для нее свойства .project-btn-back:hover - при наведении.  background-color: white; - заливка кнопки
    color: #0c8040; - цвет текста.  И добавим плавности в основном блоке .project-btn-back      transition: all 0.2s ease-in;  - all - для всех свойств. 
    В верстке добавим ссылку на главную страницу для этой кнопки.

    Теперь стилизуем кнопку в футере - связаться в телеграмме. .footer-button:hover  - по наведению, и прописываем транзишн в футер-баттон. Добавляем для нее ссылку.

    ***Займемся семантикой.
    В ХТМЛ5 появились новые семантические теги которые выглядят как див но сообщают сайту информацию(хедер, футер, основной контент, вспомогательный контент).

    header - шапка страницы
    main - основное содержимое
    section - Раздел
    article - обозначает статью( либо просто статья либо контент который можно вырвать из контекста, вставить на новую страницу и он будет самодостаточен, например как основное
            содержимое второй страницы нашего сайта, если же выдерем один абзац, то не понятно к чему относится он и для чего служит).
    footer - подвал страницы

    Заменив див на семантические теги. В индеке заменяем див с классом хеадер на хеадер <header class="header "> , портфолио помещаем в тег main а див переименовываем в section,
    тег див для футера заменяем на футер <footer class="footer">, также делаем и во второй странице, но див содержимого переименуем в article.
*/



/*  =========================    Урок 6 мобильная адаптивность    ==========================

    В фигме смотрим как должен выглядеть сайт на мобильных устройствах. Далее напишем мобильные стили для этого.
    В инструментах веб разработчика включаем toggle device toolbar для эмуляции мобильного устройства. Его можно выбрать по модели или задать размеры самому. Наименьший размер для
    которого стоит адаптировать сайт - 320 пкс в ширину. Выбираем 320 ширину - сайт выглядит криво. 

    Для мобильной адаптивности будем использовать медиа запросы. Пока увеличим ширину до 1200 пкс и будем наблюдать как она будет менятся.
    В индексе напишем тестовый блок в начале страницы перед хедером <div class="block">. Теперь в ксс файле в конце напишем ему стили    width: 800px;  height: 400px;
    background-color: purple.

    Медиазапрос - это инструкция которая реагирует на размер экрана устройства. Напишем что когда размер экрана станет равным 800пкс то данный блок изменит свой размер и цвет.
    После блока в ксс пишем  @media () {  - в скобках условие, а в фигурных код который будет выполняться. Пишем условие по ширине страницы @media (max-width: 800px).
    @media (max-width: 800px) {
        .block {
            width: 400px;
            background: coral;
        }
    }

    В середине медиазапроса указываем блок в котором мы хотим поменять свойства, а в этом блоке пишем или новые свойства которые хотим добавить или те из старых свойств которые
    хотим переопределить, с новыми значениеями. Все предыдущие свойства заново прописывать не нужно, тоесть высота блока останется прежней, а изменится цвет и ширина.
    Медиазапросы пишутся двумя путями или от десктопа(desctop first) к мобильному или от мобильного к десктопу(mobile first). Используем десктоп ферст потому что у нас
    вся разметка под десктоп уже прописана, и нам нужно только подогнать ее для мобильного.

    800пкс в данном примере - точка перелома, их может быть несколько, нас не ограничивают. *** Для медиазапросов важен порядок записи, тоесть если десктоп у нас основной, то
    сначала идут стили для него, потом для меньшего разрешения, потом для еще меньшего разрешения.

    Теперь будем изменять шапку сайта, убираем тестовый блок. Первая точка перелом будет 1140 пкс, потому что размер контейнера у нас 1110 пкс и для этого размера вид еще
    приличный, но уже нету запаса для контента, а левый блок в футере подходит прямо к краю экрана, поэтому возьмем запас по 15 пкс с каждой стороны для наилучшего вида
    итого получается 1140. Периодически нужно сбрасывать маштаб вида на 100%  контрол+0, потому что может работать внутренний масштаб.

    Для медиазапросов создадим отдельный ксс файл который подключим после нащего основного файла, так будет удобнее для просмотра кода стилей. Подключим файл к нашим страницам
    после основного файла стилей. Отключим видимость карточек и футера и плавно уменьшая размеры экрана в инспекторе смотрим как ведет себя хедер. Видим что до 760 блок смотрится
    неплохо, но размер текста уже слишком большой, поэтому сделаем сразу еще один медиазапрос на 760 пкс для этого размера изменим .header-title { font-size: 38px; ,а было
    56 пкс. Также изменим подзаголовок на 14пкс вместо 16.

    ***Под выбором разрешения есть полоска с блоками, нажимая на которую можно быстро менять разрешение.

    Теперь делаем видимыми карточки и работаем с ними. При уменьшении экрана когда карточка не может стать меньше она переносится на другую строчку, а возле первой карточки
    остается много свободного места. Так происходит потому что не хватает места для отображения обоих карточек и есть перенос на следующую строку по модели флексбокса, поэтому
    карточка даже не сжимается. При еще меньшем уменьшении карточки уже начинаю сжиматся. Сделаем так что бы на этом разрешении экрана карточки еще показывались по две в ряду.
    Это можно сделать переопределив ширину карточек, возьмем зазоры до краев экрана от карточек по 15 пкс, расстояние между карточками в 30 пкс и размер карточек сделаем
    равной половине ширины блока в которой лежит карточка. Для контейнера в главном ксс файле пропишем паддинги слева и справа, а ширину контейнера увеличим до 1140 что бы ширина
    под контент не изменилась. В  медиа для 1140 пропишем .card {  width: calc(50% - 15px); - это означает что ширина карточки будет равна 50% минус 15пкс поля слева справа и
    15+15 между карточками. (50% - 15px) - должны быть пробелы иначе не будет работать. Теперь при уменьшении размера - видим что размер карточки тоже уменьшается и они больше
    не переносятся на следующую строку, но картинка вылазит за пределы карточки. 

    У меня не получилось что бы между карточками был зазор при уменьшении размера, они слипались,
    поэтому я уменьшил паддинги на контейнере до 10ти а для карточек сделал марджены по 5пкс.


    Сделаем ограничение картинки рамками карточки, что бы она изменяла размер вместе с карточкой. Пропишем в мейн ксс селектор для всех картинок img { max-width: 100%;
    указав максимальную ширину - 100% от ширины контейнера. Поместим этот селектор вверху после боди, так как это общий селектор для всех тегов с картинками и он пишется без
    точки.

    При размере меньше 760 отступы сверху и снизу слишком большие нужно их уменьшить. В медиа при 760 пропишем .portfolio {padding-top: 40px; padding-bottom: 60px;
    Изменяем размер заголовка и отступ вниз до карточек    .portfolio-header{font-size: 38px; margin-bottom: 30px;

    Также при этом размере и меньше мы уже хотим видеть карточки по одной в ряд, для этого пропишем .card { width: 100%;. Теперь карточка одна но она не растет больше макс ширины
    540пкс и поэтому находится не по центру. Так как карточки находятся в .portfolio-card-wrapper то для него в медиа 760 пропишем justify-content: center; теперь карточки
    становятся по центру. Также в каточках изменим внутренний отступ с 20 до 15 пкс потому что такие большие поля для маленького экрана не нужны. Внутренний отступ висит на
    .card-link так что корректируем его .card-link {padding: 15px;

    Мы отменяли отступы вниз у последних двух карточек, но теперь когда они по одной в ряду, предпоследняя слипается с последней, тоесть нужно отменить отступ только у последней.
    .card:nth-last-child(2) {margin-bottom: 30px;

    Уменьшим отступ от картинки до текста с 20 до 10пкс. .card-img {margin-bottom: 10px;
    Уменьшим размер заголовка и отступ вниз .card-title {margin-bottom: 10px; font-size: 18px;
    Размер текста .card p {font-size: 14px;

    Картинка в карточке находится немного слева. Это происходит потому что размер карточки 540 а размер картинки 500 и она просто больше не растет. Для того что бы на 760 она
    лучше смотрелась поменяем макс размер карточки .card {max-width: 530px; - c 540 на 530 пкс это 500 размер картинки и по 15пкс отступы, потому что раньше у нас паддинги были
    по 20 получалось 540, а теперь паддинги уменьшились.

    Все размеры которые мы указывали были в макете фигмы, так что нужно было с ним сверятся.


    Переходим к адаптации футера. Для футера сделаем по макету фигмы что бы блоки располагались в колонку, причем фидбек идет первым, потом социалки, потом копирайт, тоесть
    обратный порядок. В медиа ксс 1140 у футера уменьшим отступы .footer {padding-top: 40px; padding-bottom: 60px;
    Выстроим в колонку .footer-row {flex-direction: column-reverse; - колонка в обратном порядке. Отцентрируем их по оси горизонтальной Х - align-items: center;
    Текст не весь по центру, нужно его тоже отцентрировать text-align: center; 

    Сделаем отступы между блоками по 50пкс кроме последнего блока .footer-column {padding-bottom: 50px;
    .footer-column:last-child{margin-bottom: 0; - но у нас последний элемент теперь первым стоит и нужно выбрать ферст чайлд  .footer-column:first-child{margin-bottom: 0;

    Уменьшим размеры элементов. Начнем с копирайта в медиа ксс в блоке меньше 760 дописываем .footer-copyright-name {font-size: 18px; margin-bottom: 5px;
    Уменьшаем размер текста в теге р  .footer-copyright p {font-size: 14px; margin-bottom: 5px;

    В блоке с иконками тоже меняем размер текста .footer-icons p {font-size: 14px;
    В контактах тоже меням шрифт и отступ вверх обнуляя другие отступы .footer-contacts p {font-size: 14px; margin: 0; margin-top: 15px;

    Уменьшаю отступы в середине кнопки потому что текст вылазит за ее пределы для разрешения до 760 .footer-button { padding: 0 10px ; width: 100%; max-width: 320px;


    Удаляем все классы none в main.css и перейдем к редактированию второй страницы(внутренней).

    Меняем паддинги согласно макету в блоке с классом Проджект в медиа 760 .project { padding: 40px 0 60px 0; - 40 сверху 60 вниз до футера
    Изменяем заглавный текст согласно макету .project-title {font-size: 28px; margin-bottom: 30px;

    Отступ от картинки вниз 20 .project-image { margin-bottom: 20px;

    Текст блока дескрипшн остается таким же
    Отступ от текстового блока до кнопки .project-description { margin-bottom: 50px;

    Текст кнопки вылазит за кнопку на вторую страницу, а размеры текста и кнопки по макету такие же значит нужно поправить отступы до текста в кнопке установим их до 10ти пкс
    .project-btn-back { padding: 0 10px ;  
    также зададим ширину 100% а макс ширину в 320пкс это мы задаем для того что бы на разрешении от 760 до 320 пкс 
    кнопка не прилягала в плотную к тексту в середине и лучше смотрелась. width: 100%; max-width: 320px;
*/



/*  =========================    Урок 7 скролл по стрелочке, видеофон     ==========================

    Раместим вместо главной картинки видеоо с помощью библиотеки vide.js (https://vodkabears.github.io/vide/) - это
    jQuery плагин, поэтому для начала работы с ней нам нужно подключить библиотеку jQuery (https://jquery.com). Видеофон
    выберем на сайте https://jquery.com .

    Скачаем видеофон и разместим в папке проекта -> video
    Следует сделать скриншот в начале видео, это изображение будет использоваться как заглущка пока/если видео не загрузится.

    Установить актуальную библиотеку jQuery - кликнуть на Download -> Download the compressed, production jQuery 3.6.0 ->
    Сохранить ссылку как -> сохраняем файл jquery-3.6.0.min.js.  Далее этот файл сохраним в папке проекта->libs->jquery.

    Скачаем библиотеку vide.js. Нажимаем даунлоад, попадаем на гитфхаб, кликаем на  Source code (zip). Открываем скачанный
    файл в папке dist две версии библиотеки полная и минифицированная. Копируем минифицированную в libs->vide.

    На сайте vide по кнопке docs видим два варианта подключени библиотеки. Вариант через  HTML  и через JS код. Будем
    подключать через JS код так как он короче и проще(по утверждению автора ролика).

    Подключаем библиотеки и плагины в конце страницы в которой будем использовать видеофон (index - у нас) потом напишем скрипт для
    запуска видео на странице.
    подключаю jquery <script src="./libs/jquery/jquery-3.6.0.min.js"></script>
    подключаю vide <script src="./libs/vide/jquery.vide.min.js"></script>

    Ниже подключим файл со скриптами <script src="./js/main.js"></script> , назовем его main.js и поместим в папку js  
    С помощью JS  инициализируем библиотеку и подключим отображение видеофона для элемента который будем находить по ID. Для этого
    пропишем айди для хедера <header class="header" id="header">

    В main прописывам начало запуска скрипта во время загрузки страницы. Обращаемся к библиотеке jquery - $ , передаем селектор для 
    выбора всего окна - window, задаем метод .on - отслеживаем определенное событие нашего окна с документом, событие 'load' - загрузка.
    Тоесть когда происходит загрузка окна запускается функция.      $(window).on('load', function(){ });

    Наполняем тело функции кодом. Через jquery $ обращаемся к тому элементу для которого будет воспроизводится видеобекграунд по 
    селектору айди $('#header'), если бы нужно было обратится по классу тогда $('.header') - как в css.

    К выбранному элементу применяем метод vide (так как он уже подкючен в индексе), в методе указываем путь к видео и картинке.
    $('#header').vide('./video/cover', ) - указываем имя файля без раширения. 

    Вторым аргументом передаем объект - цвет фона который показывается пока идет подгрузка видео
    $('#header').vide('./video/cover', {
            bgColor: '#4add4c'
        });
    Цвет взят приблизительно к цвету начального видео пипеткой, можно прописать 'green' - работает.

    В консоли выдаются ошибки потому что плагин ищет различные расширения по названию видео такие как gif, jpeg. 
    GET http://127.0.0.1:5500/MySite-main/video/cover.gif 404 (Not Found)
    GET http://127.0.0.1:5500/MySite-main/video/cover.jpeg 404 (Not Found)

    ***Для отображения видеофона нужно убрать в ксс y header бэкграунд имейдж и калор, закоментируем.
    background-color: #52647F;
    background-image: url("./../img/header/header-bg-matrix.jpeg");


    Выполним интерактив стрелочки (скролл) что бы при клике по ней страница перемещалась к секции portfolio. Для начала пропишем ссылку,
    потом сделаем плавность анимации.

    Для секции портфолио задаем айди   <section class="portfolio" id="porfolio">

    В индексе меняем див стрелочки на ссылку и дописываем на какой элемент она будет ссылаться.
        <div class="header-arrow">
            <img src="./img/header/chevron-down.svg" alt="Arrow">
        </div>
    стало
        <a href="#portfolio" class="header-arrow">
            <img src="./img/header/chevron-down.svg" alt="Arrow">
        </a>
    Теперь по клику на стрелочке нас резко перемещает на секцию портфолио.

    Для плавности можно подключить JS скрипт или использовать ксс свойство в теге html - который создадим выше над body 
    scroll-behavior: smooth; - поведение скролла - плавное.
*/



/*  =========================    Добавление эффектов     ==========================

    Добавлю скругление краев карточки и картнинок в них
    border-radius: 15px;


    Эффект подпрыгивания иконок в футере при наведении на них по оси игрик, вверх(-20% от своего размера(высоты))
    .footer-icons-row a:hover{
        animation: jump 0.4s ease-in;       - подключение анимации 
    }

    @keyframes jump{                        - анимация
        0% { transform: translateY(0%) }
        50% { transform: translateY(-20%);}
        100% { transform: translateY(0%);}
    }


    увеличение размера кнопки на 5%(1.05)
    .footer-button:hover {
        background-color: white;
        color: #0c8040;
        transform: scale(1.05);

*/