/* Подключаем стили     <link rel="stylesheet" href="./style.css"> по ссылке в head. ***Начинать путь нужно с  ./ - означает текущую
директорию(один уровень с index.html) так гарантируется работа с любой длинной вложенности на сервере.

 коментарии в css также как многострочные комментарии в JS /звездочка  комментарий  звездочка/

В css файле по нажатию контрол+пробел показывается палитра цветов.

Обращаться можно по 1)тегу 
body {
    background-color: rgba(116, 100, 131, 0.486);
}
h1 {
    color: darkmagenta;
}

по 2)классу. Название класса не может начинатся с цифры
.red {
    color: red;
    text-decoration: overline;
}

по 3) id, по 4) аттрибуту

color -  цвет элемента
text-decoration: underline; - подчеркивание текста
background-color: rgba  - цвет бекграунда 

margin - внешние отступы
body {
    margin: 0; - сделали что бы  блок div прилягал полностью к краям браузера(не было зазоров между ними) 


width - ширина блока, 100% - полная ширина потому что лежит в блоке body
Если поставить   height 100% то он будет занимать высоту от контента в нем, а для того что бы на весь body его растянуть нужно установить 100vh - view height - это высота всего окна которое есть в середине браузера
.header { 
    width: 100%;
    height: 100vh;
    background-color: darksalmon;

Для того что бы удобно было выравнивать текст в блоке нужно объявить блок flex боксом. Это делает в css в блоке который будет флексом     display: flex;  По умолчанию в флекс бокс модели все элементы выстраиваются в ряд(строку). Прописываем     flex-direction: column; для постановки элементов в столбец( по умолчанию было row).*** Обычно все флекс
параметры прописывают вначале блока.

выравнивание происходит по осям     justify-content: center; - вертикальная относительно колонки 
align-items: center; - горизонтальная относительно колонки

По Figma смотрим макет верстки. Текст используется 1 Монсерат с разным начертанием, нужно его подключить через сервис google font shttps://fonts.google.com. Находим там этот шрифт, заходим в него и выбираем какие начертания нужно подключить. В данном случае regular, bold, semibold и копируем ссылку которая появилась в окне справа в index.html после ссылки на css вставляем. Что бы к нему обращаться в ксс файле с сайта копируем CSS rules to specify families - font-family: 'Montserrat', sans-serif; и вставляем эту инструкцию в свойства body. Эта инструкция говорит что все недписи внутри тега боди и вложенные в него будут наследовать этот шрифт, а через запятую указан санс-сериф - прямой шрифт без засечек. Если наш шрифт не подгрузится у пользователя, то будет использован другой шрифт сенс-сериф который доступен пользователю.

Из фигмы выделив нужный элемент можно выбрать справа со вкладки code ксс параметры и вставить их в нужный блок ксс файла.
        position: absolute;
        width: 581px;
        height: 73px;
        left: 430px;
        top: 327px;

        font-family: Montserrat;
        font-style: normal;
        font-weight: bold;
        font-size: 56px;
        line-height: 130%;
         //identical to box height, or 73px 

        text-align: center;

        color: #FFFFFF;
 Но не все эти параметры нам нужны, поэтому нужно некоторые удалить. Блок с позицией пока удаляем, так как у нас позиционирование уже есть. Удаляем фонт фемили
 потому что у нас уже в боди он прописан для всех элементов. Удаляем фонт-стайл - это начертание прямого текста. По умолчанию и так ставится прямое начертание (курсив-italic).
Фонт вейт - переводим в числовое значение. Когда выбирали начертание шрифта на гугл сайте регуляр = 400, семиболд = 600, болд = 700.
Line-height - высота строки. 130% аналогично множителю 1.3
text-align: center - выравнивание текста по центру.

Также копируем и удалям ненужное для хедэр-сабтайтл
     font-weight: bold;
    font-size: 16px;
    line-height: 150%;
    
    text-align: center;
    letter-spacing: 0.2em;   - расстояние между буквами(разреженность текста)
    text-transform: uppercase; - текст в верхнем регистре
    
    color: #FFFFFF;

Теперь изменим отступы между элементами тайтл и сабтайтл, для этого нам нужно изменить цвет бекграунда.
Изменим цвет бекграунда на похожий с макета. Для этого выберем белый текст, клацнем на цвет, там выберем пипетку и получим цвет фона клацнув ей на цвет на макете, потом
вернем тексту белый цвет, а полученный вставим в ксс файл. Откроем панель разработчика на вкладке элементс. При наведении на элемент, он выделяется и оранжевым цветом
показываются отступы, которые даны по умолчанию, нам нужно поставить свои отступы. Это внешние отступы поэтому для хедер-тайтл и хедер-сабтайтл прописываем margin: 0; обнуляя
отступы со всех сторон.
В фигме выбираем первый элемент и зажав альт наводит на нижний элемент - выскакивает подсказка - 25 это расстояние между ними. Теперь после margin можно дописать в хедер-тайтле
отступ вниз 25px. margin-bottom: 25px;

Теперь экспортируем фон. Выбираем в фигме фон, и в правой панеле выбираем экспорт. Файл у нас большой и в нем не нужна прозрачность, поэтому будем экспортировать в JPG. Если
нужна прозрачность(обычно для небольших иконок) экспортируем в PNG. В папке с проектом создаем папку img а в ней папку header и помещаем туда изображение. После background-color
что бы цвет его не перекрывал прописываем background-image: url("./../img/header/header-bg-default.jpg"); - путь считается относительно ксс файла. ./ - текущая директория,
потом ../ - две точки выход на уровень вверх. 

Применилось изображение оно дублируется, а не растянулось на весь блок. Нам нужно прописать background-size: cover; background-size: - размер фон. изображ.
cover - полностью заполнит блок в котором размещено, так что бы сохранить масштабирование и не допустить пустых областей.
Можно сделать что б наверняка не было видно пустых областей дописав ниже background-repeat: no-repeat; - отменяем дублирование, background-position: center; - позиция в центре.

Теперь экспортируем стрелочку, это векторная фигура, поэтому экспортируем ее как svg формат. СВГ мы можем подключить как картинку, а можем через код. Сейчас подключим как
картинку, для этого делаем новый блок <div class="header-arrow"></div>. В макете фигмы видим размер общей области 48 на 48. Прописываем эти размеры width: 48px;
height: 48px; также прописываем  background-color: red; для видимости этого блока. теперь нам нужно его разместить внизу блока по центру абсолютным позиционированием.

Изначально элементы размещаются статически или по модели флексбокса. Но если нужно выдернуть элемент из общей структуры нужно использовать абсолютное позиционирование.
Прописываем position: absolute; - теперь эл. перекрыл элементы с текстом. Теперь он размещается относительно родителя которым является боди. Но мы можем принудительно
установить ему родителя, для этого какому то диву в котором находится этот элемент нужно прописать position relative, тогда уже этот див будет его родителем для 
абсолютного позиционирования. Прописываем для хэдера. Теперь допустим для размещения в правом верхнем углу элемента хедер элемента арров в его блоке прописываем
top - 0, right- 0.
Для расположения внизу по центру прописываем   bottom: 0px;   left: 50%; Но блок будет не совсем по центру, потому что считается расстояние от левой границы экрана до
левой границы элемента. Можно использовать трюк пододвинув элемент влево на половину его ширины - 24 пикселя. Что бы пододвинуть влево используем отступ слева
с отрицательным значением  margin-left: -24px; но размещение будет завязано на ширине элемента, и если ширина изменится то нужно будет менять и параметр.
Так что прописываем вместо него transform: translate(-50%, 0); - он принимает 2 значения 1) смещение по х, 2) смещение по у. По у нам не нужно смещать поэтому пишем 0.

Теперь поместив в элемент стрелочку. Это можно сделать прописав ее через фон(бекграунд), через тег img в индексе, можем передать напрямую код свг иконки.
Размещаем в индексе через тег img  <img src="./img/header/chevron-down.svg" alt="Arrow"> - путь к картинке, альт - описание картинки. Теперь убираем красный фон.
Отступ от низа блока хедер до блока со стрелкой 30 пикселей, прописываем в bottom: 30px;

========================= Урок 3 верстаем блок "Портфолио" ==========================
Создадим новый див для блока портфолио. В него поместим див для заголовка и отдельно див контейнер для карточек в котором они будут позиционироваться по центру.
Контейнер нужен что бы при разных разрешениях экрана его содержимое оставалось по центру экрана и было хорошо читаемо.

В фигме при нажатии ctr+shift+4 показывается сетка которая помогает в построении макета. Если выделить в фигме сразу две карточки через шифт, то покажется общая ширина
контейнера который создадим в <div class="portfolio">. Создаем <div class="container"> его не подвязываем названием к портфолио, потому что стиль для него будет использоватся
в футере(подвале), тоесть этот див будет у нас использовани и для подвала. Из-за этого в ксс мы будем его прописывать после стиля боди, потому что он общий для нескольких
элементов в разных частях верстки. 

Устанавливаем ширину для контейнера в 1110px как по макету width: 1110px;. Но для того что бы адаптировать его к мобильной верстке нужно задавать максимальную ширину, тогда
если размер экрана будет меньше то контейнер сожмется max-width: 1110px, а если размер экрана будет больше, то контейнер остановится на заданном значении.
Для дива портфолио и контейнер задаем background-color что бы их можно было различить в нашей верстке.

Для удобства работы с блоком нужно скрыть шапку из прошлого урока. Для этого создадим в ксс файле стиль none .none{display: none;} и пропишем его в индексе к диву с классом
хедер, этот стиль скрывает полностью элемент. Но хедер все равно показывается, это получилось потому что к диву применен и хедер в котором прописан display flex и none,
 но none у нас в ксс файле прописан выше чем хедер и браузер переопределил свойство дисплей на флекс. Для того что бы этого избежать нужно или прописать none в самый конец
 ксс файла или добавить в none восклицательный знак display: none !important; - теперь браузер будет видеть что это свойство важное и не будет его переопределять.

Теперь нужно блок контейнер выровнять по центру, для этого прописываем  margin-left: auto;  margin-right: auto; эти свойства выравнивают блочный тег по центру.
По макету фигмы видно что верхний отступ от надписи Портфолио до шапки - 80 пикс, а от нижнего края до подвала 115, зададим их в блоке портфолион как внутренние отступы,
так как внешне блок портфолио будет прилягать вплотную к шапке и подвалу. padding-top: 80px; padding-bottom: 115px;

Теперь стилизуем надпись Портфолио, она помещена в h2 тег и добавим для ситилзации класс portfolio-header. В него в ксс файле копируем свойства из фигмы 
без абсолютного позиционирования.

Далее нужно завестать блок с карточками. Для начала сделаем одну карточку потом на ее основе сделать другие карточки и поместим их в отдельный див который будет их выравнивать
в ряд с переносом. Выглядеть будет карточка как див с классом card в котором размещена картинка, ниже заголовок h3, ниже текст с описанием. Для копирования картинки как на
макете выбираем карточку и потом картинку Group 5 потом справа экспорт в JPG. В данном случае картинка намного больше чем мы экспортируем, и если нужно получить оригинал нужно 
раскрыть Group 5, потом справа зайти в inspect  в ней во вкладке code выбрать table и там будет ссылка на оригинал картинки. Экспортируем все 4 картинки.
Прикручиваем картинку через тег img, заголовок в h3 и текст в теге <p>. Добавляем классы для картинки card-img, для заголовка card-title, а тег р стилизуем по классу родителя
с классом card.

Стилизуем заголовок card-title, копируем свойства из фигмы. Так как это заголовок у него есть отступы, мы их сбрасываем m0 развернем табом в margin: 0; и до следующего
элемента - текста у нас есть отступ вниз 13px пропишем его mb13 развернется в margin-bottom: 13px;

Стилизуем карточку. У нее есть внешняя тень, белый фон и внутренние отступы до элементов по 20 пикселей со всех сторон и 30 от нижнего края.
Размещаем классы в ксс файле в той же последовательности что и в индексе для удобства чтения.
Делаем белый фон background-color: white;. Так как карточка блок - она заняла 100% ширины - особенности блочной модели. Ширина карточки по фигме - 540, прописываем
максимальную с оглядкой на адаптивность max-width: 540px;
Делаем внутренние отступы по 20пикселей, вниз 30 - это потому что так текст расположен(с учитом высоты текста???) p20 раскрываем в padding: 20px; получился отступ
везде ппо 20 пикселей а справа больше, это произошло потому что в блочной модели при указании ширины подразумевается ширина контента блока и она не включает в себя
внутренние отступы(паддинги) и не включает рамку, например border: 10px solid blue, то блок увеличится в ширину еще на 20 пикселей(левая 10 + правая 10). Для того 
что бы ширина была не контета, а блока в которые все включается нужно прописать box-sizing: border-box;
*** Что бы не прописывать для каждого элемента box-sizing: border-box; используют трюк. В самом верху ксс файла прописывают *{} - эта запись выбирает все элементы 
на странице и в него помещают эту запись.

Теперь задаем отступ от картинки до заголовка,  и стилизуем абзац если это нужно.
margin-bottom: 20px;  - от картинки до заголовка.

Стилизуем абзац относительно дива с классом card обращаемся .card p {} - это означает что мы выбираем все теги р которые лежат в классе card. Нужно указать
    font-size: 16px; line-height: 130%; color: #000000; остальные значения в фигме стандартные для шрифта по умолчанию. Также удаляем у него стандартные внешние
    отступы     margin: 0; и допишем отступ вниз 10 пикселей что бы соответствовать макету в фигме    margin-bottom: 10px;
Это карточка превью, поэтому она не рассчитана на несколько абзацев. 


Выстроим карточки в определенном порядке. Прокоментируем начало и конец верстки карточки в индексе. Скопируем карточку 3 раза выделив код и нажав shift+alt+вниз, видим
что все карточки смещаются вниз в один столбец потому что это блочный тег див и он занимает всю ширину, а нам нужно что бы было в 2 столбца визуально. На самом деле
карточки будут идти в линию, а потом переносится на следующую строку. Для этого выравнивать будем по модели flexbox. Для всех карточек нарисуем отдельный div контейнер,
который будет включать в себя ширину двух карточек с отступами между ними. Для него пропишем display flex (в этой модели по умолчанию элементы выстраиваются в ряд),
а для переноса на следующую строку пропишем свойство flexwrap - wrap, тогда те элементы которые не помещаются в првый ряд переносились и помещались во второй.

Создаем див обвертку(контейнер) <div class="portfolio-card-wrapper"> и помещаем в него все карточки. Прописываем display: flex; - карточки выстроились в ряд без переноса.
flex-wrap: wrap; - заставляет карточки переносится. Тепеперь выровняем отступы карточек между собой. Можно задать его с помощью margin-right но он будет срабатывать только
для первой карточки в ряду, так две карточки останутся без него, легче сделать это через флексбокс модель, свойством которое выравнивает элементы по краям контейнера
(выравнивает элементы по оси х - потому что ряд основной, делает отступы от первого и последнего элемента в ряду до контейнера, а свободное пространсво распределяет между
элементами) justify-content: space-between;

Теперь добавим отступы от карточки вниз, до следующей карточки согласно верстке 30пикселей, пропишем в card  margin-bottom: 30px;

У нижних карточек теперь появился отступ который увеличивает общее расстояние к низу  страницы, добавляя этот марджин к паддингу блока портфолио. Нужно убрать у двух
нижних карточек марджин используя псевдо селекторы. Можно было бы создать дополнительный класс и прописать в нем margin bottom-0, а потом добавить этот класс к двум
карточкам, но мы сделаем по псевдо селектору - выбрав два последних элемента внтури контейнера. В данном случае контейнером выступает portfolio-card-wrapper внутри него
лежат дивы с классом card. Для этого используем псевдо селектор - он так называется потому что с в хтмл мы ничего не добавляем но тем не менее этот селектор будет работать
и выбирать два последних элемента.
.card:last-child - выберет последнюю карточку,а  .card:nth-last-child(2) - выберет второй с конца элемент. В этих блоках в ксс файле мы и прописываем margin-bottom: 0;
Что бы сократить запись и не дублировать свойство, напишем обращения к элементам через запятую

Добавим тень и убираем цветной фон кард. Убираем бекграунд колор у контейнера и у портфолио, и добавим тень карточкам. В фигме выбираем карточку и слева выбираем rectangle 10
это наша карточка, теперь справа можно увидеть свойство бокс шедов, скопируем его box-shadow: 0px 10px 40px rgba(126, 155, 189, 0.35); в класс кард. Это свойство задает 
тень для блока. Первая цифра указывает на ось х смещение в право, вторая - у смещение вниз, третья 40 пкс - размытие тени, дальше цвет тени и последняя -0.35 прозрачность.

Обнуляем отступы у h2 портфолиохедер и добавляем отступ до следующих элементов(карточек 70 пикс)     margin: 0;   margin-bottom: 70px;

Копируем текст для названия карточек и сменим картинки в карточках. Убираем параметр нон у хедера.




*/